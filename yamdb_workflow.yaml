<<<<<<< HEAD
name: yamdb_workflow
=======
name: yamdb_final
>>>>>>> testn3

on: [push]

jobs:
  tests:
<<<<<<< HEAD
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r requirements.txt 

    - name: Test with flake8 and django tests
      run: |
        python -m flake8
        cd api_yamdb/
        python manage.py test
        pytest
  docker:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker 
        uses: docker/login-action@v1
        with:
              username: ${{ secrets.DOCK_USER }}
              password: ${{ secrets.DOCK_PASS }}
=======
    name: Run project test
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt
      - name: Lint with flake8
        run: flake8 .
      - name: Test with pytest
        run: python manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCK_USER }}
          password: ${{ secrets.DOCK_PASS }}

>>>>>>> testn3
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: 2498573548934587/yamdb_final:latest
<<<<<<< HEAD
  deploy:
      runs-on: ubuntu-latest
      on:
        push:
          branches:
            - master
          needs: docker
          steps:
            - name: executing remote ssh commands to deploy
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.HOST }}
                username: ${{ secrets.USER }}
                key: ${{ secrets.SSH_KEY }}
                passphrase: ${{ secrets.PASSPHRASE }}
                stack_file_name: docker-compose.yaml
                script: |
                  sudo docker pull {{ secrets.DOCK_USER }}/yamdb_final
                  sudo docker-compose stop
                  sudo docker-compose rm web
                  touch .env 
                  echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
                  echo DB_NAME=${{ secrets.DB_NAME }} >> .env
                  echo POSTGRES_USER=${{ secrets.DB_USER }} >> .env
                  echo POSTGRES_PASSWORD=${{ secrets.DB_PASS }} >> .env
                  echo DB_HOST=${{ secrets.DB_HOST }} >> .env
                  echo DB_PORT=${{ secrets.DB_PORT }} >> .env
                  sudo docker-compose up -d
=======

  deploy:
    name: Deploing the project
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
          apt update && apt install sudo
          sudo docker pull 2498573548934587/yamdb_final
          sudo docker-compose stop
          sudo docker-compose rm web
          touch .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.DB_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          sudo docker-compose up -d

>>>>>>> testn3
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
<<<<<<< HEAD
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TL_TO }}
        token: ${{ secrets.TL_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!
=======
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TL_TO }}
          token: ${{ secrets.TL_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
>>>>>>> testn3
